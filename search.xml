<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ACM相关比赛滚榜教程</title>
      <link href="/2025/05/16/%E6%BB%9A%E6%A6%9C%E6%95%99%E7%A8%8B/"/>
      <url>/2025/05/16/%E6%BB%9A%E6%A6%9C%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="PTA-滚榜使用说明"><a href="#PTA-滚榜使用说明" class="headerlink" title="PTA 滚榜使用说明"></a>PTA 滚榜使用说明</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>为了更好的服务于学生，补全华北水利水电大学在算法竞赛方面的一些不足的地方，本人 （ChiefNing ）在网上学习如何将 pta 结合于 resolver （ICPC 官方滚榜工具）。由于无法把 pta 上的比赛 部署至 Domjudge （官方滚榜工具所配合的测评平台），因此在配置奖项的时候无法使用套接字进行数 据导入，只能使用 xml 文件来进行滚榜文件的配置。则需要对赛时的 “提交记录 ”进行处理分析，但是 pta 官方并未给出导出 “提交记录 ”的模块，因此需要第三方工具进行对网页数据的爬取，在这里我推荐使用 浙江大学开发的一款爬虫软件 EasySpider ，该软件上手简单，爬取数据也比较方便，下面会详细介绍该 软件。 </p><h2 id="2-对于数据的爬取"><a href="#2-对于数据的爬取" class="headerlink" title="2. 对于数据的爬取"></a>2. 对于数据的爬取</h2><p>上面我们提到，需要 EasySpider 进行对数据的爬取，该软件可以在 github 上找到，也可也从本目录中 找到（但是不是最新的，可能存在一系列 bug ，在下面我会详细说明其中一个影响比较大的 bug 的处理 方法，先说一下配置一个爬虫项目的步骤。 点击 EasySpider.exe ，进入软件主页面，选择中文之后会有 “设计 &#x2F;修改任务选项 ”，点击进入选择 设计模式，这里有三个设计模式，推荐使用 ”使用纯净版浏览器设计 “。进入到任务列表中，点击左上角的 ”创建新任务 “，会进行新任务设计，在这里必须输入 pta 的登录 时候的 url ，具体操作如下： </p><p>随便打开一个浏览器进入到 pta 的主页之下，然后点击 ”登出 “</p><p>之后复制 url 到爬虫软件上即可使用，即下述 </p><p>或者直接输入 <a href="https://pintia.cn/auth/login">https://pintia.cn/auth/login</a>? 即可，如下图所示：<br><img src="/img/acmrollrank/p1.png" alt="p1"></p><p>之后点击开始设计即可在网站上开始设计。 </p><p>需要输入自己的账号与密码，右键点击文字框，会弹出如右下角所示的界面，之后点击输入文字即 可，你需要在其中输入你的账号密码，之后的每一步都是模仿人的行为进行。 </p><p>在输入完之后，点击 “登录 ”，有几率跳转到验证界面，这个验证界面需要人手动进行验证，因此其 逻辑是 –点击 “登录 ”–等待一定时间（在这个时间内需要真人进行手动验证），如下所示：<br><img src="/img/acmrollrank/p2.png" alt="p2"></p><p>点击之后会跳转到主界面，此时需要点击下方 “鹿头 ”的这个东西<br><img src="/img/acmrollrank/p11.png" alt="p3"><br>正常的情况应该如下所示：<br><img src="/img/acmrollrank/p12.png" alt="p4"><br>此时需要设计点击登录之后需要等待的时间，这段时间用来进行认证，这里我设计了 10 秒，设计多久都 行，要保证自己可以完成验证阶段。<br><img src="/img/acmrollrank/p13.png" alt="p5"></p><p>之后返回到网站的那个界面，以此按照上述设计方式点击对应的比赛 –&gt; ” 管理 “ –&gt; ” 提交列表 “( 注意，这里都是需要进行点击配置，不要自己点击了忘记进行配置了！！！！！！！！！！！ )</p><p>现在应该到达了正确的提交列表的界面了，下一步比较关键，需要爬取对应的元素 把没用的元素删除，只留下 ”时间 “，”答案结果 ”，“题目名称 ”，“提交人 ”即可<br><img src="/img/acmrollrank/p10.png" alt="p6"><img src="/img/acmrollrank/p15.png" alt="p7"><img src="/img/acmrollrank/p13.png" alt="p8"><img src="/img/acmrollrank/p15.png" alt="p9"></p><p>最后点击 “采集数据 ”就可以了。 哦对还有要设计翻页，这个就不多说了。 </p><p>点击完保存，返回至主界面，点击 “查看，管理，执行任务 “，点击对应的任务信息，最后执行任务 就可以了，这里推荐点击本地直接执行（纯净模式）<br><img src="/img/acmrollrank/p15.png" alt="p10"></p><p>注意，执行完的结果会保存在文件目录中的 Data 文件夹中，并且是 csv 文件，此时我们需要把 csv 文件转为 xlsx 文件，并且按照下述把对应的列起名字，如下所示：<br>| 提交时间      | 提交状态                | 题目名称 |用户ID|提交语言|提交ID|</p><p>把名字改成 SubData 就完成了数据采集这一步。 </p><h2 id="3-对于数据的处理"><a href="#3-对于数据的处理" class="headerlink" title="3. 对于数据的处理"></a>3. 对于数据的处理</h2><h3 id="3-1-文件转化："><a href="#3-1-文件转化：" class="headerlink" title="3.1 文件转化："></a>3.1 文件转化：</h3><p>需要把 xlsx 文件转为 xml 文件，之后导入到 solver 中进行 json 的配置 </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># **************function**************** #</span></span><br><span class="line"><span class="comment"># 转化成xml的提交状态</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">提交状态</span>(<span class="params">status_str</span>):</span><br><span class="line">    <span class="keyword">if</span> status_str == <span class="string">&quot;答案正确&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;AC&quot;</span></span><br><span class="line">    <span class="keyword">if</span> status_str == <span class="string">&quot;编译错误&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CE&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;WA&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定时间的时间戳</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">时间戳</span>(<span class="params">date_string</span>):</span><br><span class="line">    <span class="comment"># 定义日期时间的格式</span></span><br><span class="line">    date_format = <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将日期字符串转换为datetime对象</span></span><br><span class="line">    dt_object = datetime.strptime(date_string, date_format)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将datetime对象转换为时间戳</span></span><br><span class="line">    timestamp = dt_object.timestamp()</span><br><span class="line">    <span class="keyword">return</span> timestamp</span><br><span class="line"></span><br><span class="line">new_root = etree.Element(<span class="string">&#x27;contest&#x27;</span>)</span><br><span class="line"><span class="comment"># 方便模块化写入xml</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_xml</span>(<span class="params">child_elem_str, cfg_list, val_list</span>):</span><br><span class="line">    elem = etree.SubElement(new_root, child_elem_str)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cfg_list)):</span><br><span class="line">        etree.SubElement(elem, cfg_list[i]).text = val_list[i]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ********************************** #</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># **************参数设置**************** #</span></span><br><span class="line">name_id_path = <span class="string">&quot;id_name.xls&quot;</span> <span class="comment"># id和滚榜姓名   用户ID 昵称</span></span><br><span class="line">data_path = <span class="string">&quot;SubData.xlsx&quot;</span> <span class="comment"># oj导出来的提交数据</span></span><br><span class="line">start_time = <span class="string">&quot;2024-12-07 14:00:00&quot;</span> <span class="comment"># 比赛开始时间</span></span><br><span class="line">end_time = <span class="string">&quot;2024-12-07 18:00:00&quot;</span>   <span class="comment"># 比赛结束时间</span></span><br><span class="line">continue_time = <span class="string">&quot;4:00:00&quot;</span>          <span class="comment"># 比赛时长</span></span><br><span class="line">fz_size = <span class="string">&quot;00:20:00&quot;</span>                <span class="comment"># 封榜时长</span></span><br><span class="line">problem_num = <span class="number">10</span>                   <span class="comment"># 题目数量</span></span><br><span class="line">题目名称 = &#123;                        <span class="comment"># 题目名称对应id</span></span><br><span class="line">    <span class="string">&#x27;A.&#x27;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;B.&#x27;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;C.&#x27;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;D.&#x27;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;E.&#x27;</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;F.&#x27;</span>: <span class="string">&quot;6&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;G.&#x27;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;H.&#x27;</span>: <span class="string">&quot;8&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;I.&#x27;</span>: <span class="string">&quot;8&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;J.&#x27;</span>: <span class="string">&quot;8&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="comment"># ************************************** #</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_info</span>():</span><br><span class="line">    info_elem = etree.SubElement(new_root, <span class="string">&#x27;info&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    etree.SubElement(info_elem, <span class="string">&#x27;length&#x27;</span>).text = continue_time</span><br><span class="line">    etree.SubElement(info_elem, <span class="string">&#x27;penalty&#x27;</span>).text = <span class="string">&quot;20&quot;</span></span><br><span class="line">    etree.SubElement(info_elem, <span class="string">&#x27;started&#x27;</span>).text = <span class="string">&quot;False&quot;</span></span><br><span class="line">    etree.SubElement(info_elem, <span class="string">&#x27;starttime&#x27;</span>).text = <span class="built_in">str</span>(时间戳(start_time))</span><br><span class="line">    etree.SubElement(info_elem, <span class="string">&#x27;title&#x27;</span>).text = <span class="string">&quot;2024年华北水利水电大学ACM新生赛&quot;</span></span><br><span class="line">    etree.SubElement(info_elem, <span class="string">&#x27;short-title&#x27;</span>).text = <span class="string">&quot;2024 NCWUACM&quot;</span></span><br><span class="line">    etree.SubElement(info_elem, <span class="string">&#x27;scoreboard-freeze-length&#x27;</span>).text = fz_size</span><br><span class="line">    etree.SubElement(info_elem, <span class="string">&#x27;contest-id&#x27;</span>).text = <span class="string">&quot;default--3&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># region</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_region</span>():</span><br><span class="line">    write_xml( </span><br><span class="line">        <span class="string">&quot;region&quot;</span>, </span><br><span class="line">        [<span class="string">&quot;external-id&quot;</span>, <span class="string">&quot;name&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;ncwu&quot;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># judgement</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_judgement</span>():</span><br><span class="line">    write_xml(</span><br><span class="line">        <span class="string">&quot;judgement&quot;</span>,</span><br><span class="line">        [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;acronym&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;solved&quot;</span>, <span class="string">&quot;penalty&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;AC&quot;</span>, <span class="string">&quot;Yes&quot;</span>, <span class="string">&quot;true&quot;</span>, <span class="string">&quot;false&quot;</span>]</span><br><span class="line">    )</span><br><span class="line">    write_xml(</span><br><span class="line">        <span class="string">&quot;judgement&quot;</span>,</span><br><span class="line">        [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;acronym&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;solved&quot;</span>, <span class="string">&quot;penalty&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;2&quot;</span>, <span class="string">&quot;WA&quot;</span>, <span class="string">&quot;No - Wrong Answer&quot;</span>, <span class="string">&quot;false&quot;</span>, <span class="string">&quot;true&quot;</span>]</span><br><span class="line">    )</span><br><span class="line">    write_xml(</span><br><span class="line">        <span class="string">&quot;judgement&quot;</span>,</span><br><span class="line">        [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;acronym&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;solved&quot;</span>, <span class="string">&quot;penalty&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;3&quot;</span>, <span class="string">&quot;CE&quot;</span>, <span class="string">&quot;No - Compile Error&quot;</span>, <span class="string">&quot;false&quot;</span>, <span class="string">&quot;false&quot;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># language</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_language</span>():</span><br><span class="line">    write_xml(</span><br><span class="line">        <span class="string">&quot;language&quot;</span>,</span><br><span class="line">        [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;c++&quot;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># problem</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_problem</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(problem_num):</span><br><span class="line">        write_xml(</span><br><span class="line">            <span class="string">&quot;problem&quot;</span>,</span><br><span class="line">            [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;letter&quot;</span>, <span class="string">&quot;name&quot;</span>],</span><br><span class="line">            [<span class="built_in">str</span>(i + <span class="number">1</span>), <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + i), <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + i)]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># team</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_team</span>():</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    name = <span class="built_in">dict</span>()</span><br><span class="line">    ok = <span class="number">0</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        df = pd.read_excel(name_id_path)</span><br><span class="line">        ok = <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> ok:</span><br><span class="line">        <span class="keyword">for</span> index, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">            name[<span class="built_in">str</span>(row[<span class="string">&#x27;用户ID&#x27;</span>])] = <span class="built_in">str</span>(row[<span class="string">&#x27;昵称&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    df = pd.read_excel(data_path)</span><br><span class="line">    <span class="comment"># 假设 &#x27;用户id&#x27; 是用户 ID 列</span></span><br><span class="line">    df_unique_sorted = df[<span class="string">&#x27;用户id&#x27;</span>].drop_duplicates().sort_values()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ok:</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> df_unique_sorted:</span><br><span class="line">            name[<span class="built_in">str</span>(value)] = <span class="built_in">str</span>(value)</span><br><span class="line">    <span class="comment"># 如果想要每个字典是 &#123;&#x27;user_id&#x27;: value&#125; 的形式</span></span><br><span class="line">    user_dict_list = [&#123;<span class="string">&#x27;user_id&#x27;</span>: value, <span class="string">&#x27;name&#x27;</span>: name[<span class="built_in">str</span>(value)]&#125; <span class="keyword">for</span> value <span class="keyword">in</span> df_unique_sorted]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历每个 &lt;user&gt; 元素</span></span><br><span class="line">    <span class="keyword">for</span> idx, user_elem <span class="keyword">in</span> <span class="built_in">enumerate</span>(user_dict_list, start=<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(user_elem[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">        write_xml(</span><br><span class="line">            <span class="string">&quot;team&quot;</span>,</span><br><span class="line">            [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;external-id&quot;</span>, <span class="string">&quot;region&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;university&quot;</span>],</span><br><span class="line">            [<span class="built_in">str</span>(idx), <span class="string">&quot;1&quot;</span>, <span class="string">&quot;ncwu&quot;</span>, user_elem[<span class="string">&#x27;name&#x27;</span>], <span class="string">&quot;ncwu&quot;</span>]</span><br><span class="line">        )</span><br><span class="line">    num = <span class="built_in">len</span>(user_dict_list) <span class="comment"># 为最后一项设置获奖做准备</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># run</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_run</span>():</span><br><span class="line">    df = pd.read_excel(data_path)</span><br><span class="line">    team = <span class="built_in">list</span>(<span class="built_in">set</span>([row[<span class="string">&#x27;用户id&#x27;</span>] <span class="keyword">for</span> index, row <span class="keyword">in</span> df.iterrows()]))</span><br><span class="line">    team.sort()</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    teamlist = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> team:</span><br><span class="line">        teamlist[u] = <span class="built_in">str</span>(i)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    ok = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 遍历每一行数据，并将其转换为XML的子节点</span></span><br><span class="line">    <span class="keyword">for</span> index, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">        <span class="comment"># try:</span></span><br><span class="line">            write_xml(</span><br><span class="line">                <span class="string">&quot;run&quot;</span>,</span><br><span class="line">                [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;judged&quot;</span>, <span class="string">&quot;language&quot;</span>, <span class="string">&quot;problem&quot;</span>, <span class="string">&quot;status&quot;</span>, <span class="string">&quot;team&quot;</span>, <span class="string">&quot;time&quot;</span>, <span class="string">&quot;timestamp&quot;</span>, <span class="string">&quot;result&quot;</span>],</span><br><span class="line">                [<span class="built_in">str</span>(index + <span class="number">1</span>), <span class="string">&quot;True&quot;</span>, <span class="string">&quot;c++&quot;</span>, 题目名称[<span class="built_in">str</span>(row[<span class="string">&quot;题目名称&quot;</span>])], <span class="string">&quot;done&quot;</span>, teamlist[row[<span class="string">&#x27;用户id&#x27;</span>]],</span><br><span class="line">                <span class="built_in">str</span>(<span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">int</span>(时间戳(<span class="built_in">str</span>(row[<span class="string">&#x27;提交时间&#x27;</span>])) - 时间戳(start_time)))), <span class="built_in">str</span>(时间戳(<span class="built_in">str</span>(row[<span class="string">&#x27;提交时间&#x27;</span>]))),</span><br><span class="line">                提交状态(<span class="built_in">str</span>(row[<span class="string">&#x27;提交状态&#x27;</span>]))]</span><br><span class="line">            )</span><br><span class="line">        <span class="comment"># except:</span></span><br><span class="line">        <span class="comment">#     if ok:</span></span><br><span class="line">        <span class="comment">#         print(row)</span></span><br><span class="line">        <span class="comment">#         ok = 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># finalized</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_finalized</span>():</span><br><span class="line">    write_xml(</span><br><span class="line">        <span class="string">&quot;finalized&quot;</span>,</span><br><span class="line">        [<span class="string">&quot;last_gold&quot;</span>, <span class="string">&quot;last_silver&quot;</span>, <span class="string">&quot;last_bronze&quot;</span>, <span class="string">&quot;time&quot;</span>, <span class="string">&quot;timestamp&quot;</span>],</span><br><span class="line">        [<span class="built_in">str</span>(<span class="built_in">int</span>(num * <span class="number">0.1</span>)), <span class="built_in">str</span>(<span class="built_in">int</span>(num * <span class="number">0.25</span>)), <span class="built_in">str</span>(<span class="built_in">int</span>(num * <span class="number">0.45</span>)), <span class="string">&quot;0&quot;</span>, <span class="built_in">str</span>(时间戳(end_time))]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    set_info()</span><br><span class="line">    set_region()</span><br><span class="line">    set_judgement()</span><br><span class="line">    set_language()</span><br><span class="line">    set_problem()</span><br><span class="line">    set_team()</span><br><span class="line">    set_run()</span><br><span class="line">    set_finalized()</span><br><span class="line">    new_tree = etree.ElementTree(new_root)</span><br><span class="line">    new_tree.write(<span class="string">&#x27;events.xml&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, xml_declaration=<span class="literal">True</span>, pretty_print=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这个就不多对其进行说明，大家看注释就行了。注意，一定要匹配到目标项，并且把需要变化的数据全 部修改！！！ </p><h2 id="3-2-对于-xml-文件的处理"><a href="#3-2-对于-xml-文件的处理" class="headerlink" title="3.2 对于 xml 文件的处理"></a>3.2 对于 xml 文件的处理</h2><p>打开 solver 的目录，找到 awards ，对于 win 是.bat ，mac 是.sh<br><img src="/img/acmrollrank/p7.png" alt="p12"></p><p><img src="/img/acmrollrank/p8.png" alt="p13"></p><p><img src="/img/acmrollrank/p9.png" alt="p14"><br>选择 disk ，然后选择对应的文件 </p><p>打开之后是这个界面 </p><p>直接点击 save ，其他自己配置！！！！ </p><h3 id="3-3-配置-json-文件"><a href="#3-3-配置-json-文件" class="headerlink" title="3.3 配置 json 文件"></a>3.3 配置 json 文件</h3><h4 id="3-3-1-配置首刀"><a href="#3-3-1-配置首刀" class="headerlink" title="3.3.1 配置首刀"></a>3.3.1 配置首刀</h4><p>注意： </p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;awards&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;icpc6795&quot;</span><span class="punctuation">,</span><span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;create&quot;</span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;first-to-solve-A&quot;</span><span class="punctuation">,</span><span class="attr">&quot;citation&quot;</span><span class="punctuation">:</span><span class="string">&quot;First to solve problem A&quot;</span><span class="punctuation">,</span><span class="attr">&quot;team_ids&quot;</span><span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">[</span><span class="string">&quot;7&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;display_mode&quot;</span><span class="punctuation">:</span><span class="string">&quot;pause&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>id 要唯一，可以不连续 </p><p>team_ids 是刚才界面的 id </p><p>如果该题为被写出来则 </p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;awards&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;icpc6806&quot;</span><span class="punctuation">,</span><span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;create&quot;</span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;first-to-solve-L&quot;</span><span class="punctuation">,</span><span class="attr">&quot;team_ids&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="3-1-2-配置金银铜"><a href="#3-1-2-配置金银铜" class="headerlink" title="3.1.2 配置金银铜"></a>3.1.2 配置金银铜</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;awards&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;icpc6808&quot;</span><span class="punctuation">,</span><span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;create&quot;</span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;gold-medal&quot;</span><span class="punctuation">,</span><span class="attr">&quot;citation&quot;</span><span class="punctuation">:</span><span class="string">&quot;Gold Medalist&quot;</span><span class="punctuation">,</span><span class="attr">&quot;team_ids&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;awards&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;icpc6809&quot;</span><span class="punctuation">,</span><span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;create&quot;</span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;silver-medal&quot;</span><span class="punctuation">,</span><span class="attr">&quot;citation&quot;</span><span class="punctuation">:</span><span class="string">&quot;Silver Medalist&quot;</span><span class="punctuation">,</span><span class="attr">&quot;team_ids&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;display_mode&quot;</span><span class="punctuation">:</span><span class="string">&quot;list&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;awards&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;icpc6810&quot;</span><span class="punctuation">,</span><span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;create&quot;</span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;bronze-medal&quot;</span><span class="punctuation">,</span><span class="attr">&quot;citation&quot;</span><span class="punctuation">:</span><span class="string">&quot;Bronze Medalist&quot;</span><span class="punctuation">,</span><span class="attr">&quot;team_ids&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;display_mode&quot;</span><span class="punctuation">:</span><span class="string">&quot;list&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>注意： </p><p>team_ids 没有顺序，但是要包含所有的对应牌子的 id display_mode 如果不写就是默认的暂停展示个人，如果是 “display_mode”:”list” 就是不显示 个人，显示对应牌子的所有人，在滚完之后显示 </p><h1 id="3-1-3-配置其他"><a href="#3-1-3-配置其他" class="headerlink" title="3.1.3 配置其他"></a>3.1.3 配置其他</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;awards&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;icpc6794&quot;</span><span class="punctuation">,</span><span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;create&quot;</span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;rank-</span></span><br><span class="line"><span class="string">1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;citation&quot;</span><span class="punctuation">:</span><span class="string">&quot;1st place&quot;</span><span class="punctuation">,</span><span class="attr">&quot;team_ids&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;awards&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;icpc6794&quot;</span><span class="punctuation">,</span><span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;create&quot;</span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;rank-</span></span><br><span class="line"><span class="string">2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;citation&quot;</span><span class="punctuation">:</span><span class="string">&quot;2nd place&quot;</span><span class="punctuation">,</span><span class="attr">&quot;team_ids&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;awards&quot;</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;icpc6794&quot;</span><span class="punctuation">,</span><span class="attr">&quot;op&quot;</span><span class="punctuation">:</span><span class="string">&quot;create&quot;</span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;rank-</span></span><br><span class="line"><span class="string">3&quot;</span><span class="punctuation">,</span><span class="attr">&quot;citation&quot;</span><span class="punctuation">:</span><span class="string">&quot;3rd place&quot;</span><span class="punctuation">,</span><span class="attr">&quot;team_ids&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这里举一个例子，其他可以举一反三 </p><h1 id="4-项目启动"><a href="#4-项目启动" class="headerlink" title="4. 项目启动"></a>4. 项目启动</h1><p>打开 resolver 的目录，点开终端，输入 注意：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./resolver.bat c:\events.json --singleStep 999</span><br></pre></td></tr></table></figure><p>我把 json 文件放到 c盘的根目录了，其他举一反三，一般来说输入这行命令就行了，其他的没太 大必要，但是我也稍微介绍一下： </p><p>键盘快捷键： </p><p>Ctrl-Q - 退出 </p><p>r - 倒回 </p><p>0 - 重新开始（跳转到开头） </p><p>2 - 快进（无延迟地跳进一步） </p><p>1 - 快退（无延迟地倒退一步） </p><p>+&#x2F; 上箭头 - 加速（减少解析延迟） </p><p>-&#x2F; 下箭头 - 减速（增加解析延迟） </p><p>j - 重置解析速度 </p><p>p - 暂停 &#x2F; 恢复滚动 </p><p>i - 切换额外信息显示状态 </p><p>常规选项： </p><p>–info </p><p>向展示客户端显示额外信息。 </p><p>–speed 速度系数 解析延迟倍数。例如， 0.5 表示速度会加快一倍， 2 则表示速度会减慢一倍。 </p><p>–singleStep 起始行<br>从特定行开始，每一步都需要点击操作；若未指定行，则针对整个竞赛都需要如此操作。 </p><p>–rowDisplayOffset 行数 将屏幕显示向上移动指定的行数（默认是 4 行）。 </p><p>–display #</p><p>使用指定的显示屏。 </p><p>1 &#x3D; 主显示屏， 2 &#x3D; 次显示屏，依此类推。 </p><p>–multi-display p@wxh </p><p>将展示内容扩展到多个客户端。使用 “2@3x2” 表示此客户端在 3×2 的网格中处于第 2 个位置（顶部中 间）。 </p><p>–display_name 模板 使用模板更改团队显示的方式。参数： {团队。显示名称 }、{团队。名称 }、{组织。正式名称 } 以及 {组织。 名称 }。</p><p>–groups </p><p>仅解析给定正则表达式模式中对应 ID 的分组。如果给出了多个分组，则分别对每个分组进行解析。 </p><p>–pause #</p><p>从指定的暂停点开始。对测试 &#x2F; 预览很有用。 </p><p>–judgeQueue </p><p>使用评审队列开始解析。必须至少有一个奖项列表。 </p><p>–test </p><p>在未完成的竞赛上进行测试。忽略（移除）所有未评审的运行记录。 </p><p>–light </p><p>使用浅色模式。 </p><p>–help </p><p>显示此帮助信息。 </p><p>–version </p><p>显示版本信息。<br> 注意：如果出现乱码，请查 scdn ，这里不赘述 </p><h1 id="5-写在最后"><a href="#5-写在最后" class="headerlink" title="5. 写在最后"></a>5. 写在最后</h1><p>该项目是 2022 届学生邢凯宁所整理，仅供华北水利水电大学人员浏览使用，作者联系方式 QQ ：769472984 。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>匈牙利算法-二分图最大匹配</title>
      <link href="/2025/05/16/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/"/>
      <url>/2025/05/16/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="二分图最大匹配-匈牙利算法"><a href="#二分图最大匹配-匈牙利算法" class="headerlink" title="二分图最大匹配-匈牙利算法"></a>二分图最大匹配-匈牙利算法</h1><p>什么是二分图？</p><p>给出一个场景：在非诚勿扰中每位男生可以选择若干名女生作为心动女生，最后该男生可以在这些心动女生中选择一位作为女朋友带走，节目要求满足最大牵手数量，请问最多有几对能牵手成功？</p><p>如图所示1号男嘉宾的心动女生是1号，2号女嘉宾，2号男嘉宾的心动女嘉宾是3号，3号男嘉宾的心动女生是1，2，3号</p><p><img src="E:\hexo_myBolg\public\img\codeimg\eft.png" alt="image-20240719230323176"></p><p>由图可以看出来{1，1}，{2，3}，{3，2}是一组可以满足要求的数量，是3，那么如何计算呢？就运用到了匈牙利算法如下所示：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];<span class="comment">//临界矩阵存边</span></span><br><span class="line"><span class="type">bool</span> is[N];<span class="comment">//用来检查i点是否已经被选择</span></span><br><span class="line"><span class="type">int</span> match[N];<span class="comment">//用来存放选i的节点比如match[2]=1,意思是1号男嘉宾选择了2号女嘉宾</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(is[v])<span class="keyword">continue</span>;</span><br><span class="line">        is[v]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(match[v]==<span class="number">0</span>||<span class="built_in">dfs</span>(match[v]))&#123;<span class="comment">//如果i号女嘉宾没有被男嘉宾选择那么就是0，dfs(match[v])表示选择了v号女嘉宾的男生还有没有别的选择，如果有那么就让出来给v，如果没有那么就不让了</span></span><br><span class="line">            match[v]=u;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">memset</span>(match,<span class="number">0</span>,<span class="built_in">sizeof</span>(match));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> m;</span><br><span class="line">        cin&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin&gt;&gt;x;</span><br><span class="line">            g[i].<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(is,fasle,<span class="built_in">sizeof</span>(<span class="literal">false</span>));<span class="comment">//初始胡match数组</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dfs</span>(i))ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原题连接出处</p><p><a href="https://ac.nowcoder.com/acm/contest/86639/C">C-有大家喜欢的零食吗_河南萌新联赛2024第（一）场：河南农业大学 (nowcoder.com)</a></p><p>题解：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> match[N];</span><br><span class="line"><span class="type">bool</span> is[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> y: g[x])&#123;</span><br><span class="line">        <span class="keyword">if</span>(is[y])<span class="keyword">continue</span>;</span><br><span class="line">        is[y]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(match[y] == <span class="number">0</span> || <span class="built_in">dfs</span>(match[y]))&#123;</span><br><span class="line">            match[y] = x;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">memset</span>(match, <span class="number">0</span>, <span class="built_in">sizeof</span>(match));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; x; j++)&#123;</span><br><span class="line">            <span class="type">int</span> y;</span><br><span class="line">            cin &gt;&gt; y;</span><br><span class="line">            g[i].<span class="built_in">push_back</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(is, <span class="literal">false</span>, <span class="built_in">sizeof</span>(is));</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dfs</span>(i))ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans == n)cout &lt;&lt; <span class="string">&quot;Yes&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl; </span><br><span class="line">        cout &lt;&lt; n - ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra算法，分层图最短路</title>
      <link href="/2025/05/12/Dijkstra/"/>
      <url>/2025/05/12/Dijkstra/</url>
      
        <content type="html"><![CDATA[<p>给定一个源点，求解源点到每个点的最短路径长度，单源最短路径算法</p><h4 id="适用范围：有向图，边的权值没有负数"><a href="#适用范围：有向图，边的权值没有负数" class="headerlink" title="适用范围：有向图，边的权值没有负数"></a><strong>适用范围：有向图，边的权值没有负数</strong></h4><h2 id="普通堆实现的Dijkstra算法（最普遍，最常用）"><a href="#普通堆实现的Dijkstra算法（最普遍，最常用）" class="headerlink" title="普通堆实现的Dijkstra算法（最普遍，最常用）:"></a>普通堆实现的Dijkstra算法（最普遍，最常用）:</h2><p>普通堆实现的Dijkstra算法，时间复杂度0(m*log m)，m为边数</p><p>1.distance[i]表示从源点到i点的最短距离，visited[i]表示i节点是否从小根堆弹出过。</p><p>2.准备好小根堆，小根堆存放记录:(x点，源点到x的距离)，小根堆根据距离组织</p><p>3.令distance[源点]&#x3D;0，(源点，0)进入小根堆</p><p>4.从小根堆弹出(u点，源点到u的距离)<br>    a.如果visited[u]&#x3D;&#x3D;true，不做任何处理，重复步骤4</p><p>​b.如果visited[u]&#x3D;&#x3D; false，令visited[u]&#x3D;true，u就算弹出过了然后考察u的每一条边，假设某边去往V，边权为w<br>​1)如果visited[v]&#x3D;&#x3D;false 并且 distance[u]+ w&lt; distance[v令distance[v&#x3D; distance[u]+w,把(v，distance[u]+ w)加入小根堆</p><p>​2)处理完u的每一条边之后，重复步骤4</p><p>5.小根堆为空过程结束，distance表记录了源点到每个节点的最短距离.</p><p><a href="https://ac.nowcoder.com/acm/problem/226492">【模板】单源最短路1 (nowcoder.com)</a></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> dis[<span class="number">5001</span>],vis[<span class="number">5001</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[<span class="number">5001</span>];</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;,greater&lt;&gt;&gt; pq;<span class="comment">//pair.first存储路径长度，pair.second此时到达的点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));<span class="comment">//初始化为最大</span></span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y;<span class="comment">//如果存在另一个变量的w则需要开一个二维数组来存储，int a[N][N],将两点放在上面，之后在遍历的时候把len+1改成len+a[x][y]即可</span></span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">        g[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    pq.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> now=pq.<span class="built_in">top</span>().second;</span><br><span class="line">        <span class="type">int</span> len=pq.<span class="built_in">top</span>().first;</span><br><span class="line">        <span class="keyword">if</span>(!vis[now])&#123;</span><br><span class="line">            vis[now]=<span class="number">1</span>;</span><br><span class="line">            dis[now]=len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> a:g[now])&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[a])&#123;</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;len<span class="number">+1</span>,a&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(vis[n])&#123;</span><br><span class="line">        cout&lt;&lt;dis[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不想用pair，则可以重载，但是要注意，重载小于号是大根堆，反之是小根堆，如下所示：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span>&#123;</span><br><span class="line">    <span class="type">int</span> now,val;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(P <span class="type">const</span>&amp; it) <span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val&gt;it.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;P&gt; pq;<span class="comment">//这是小根堆</span></span><br></pre></td></tr></table></figure><p>好巧不巧，第二道题就是按照值存储，所以稍作改动就直接ac了</p><p><a href="https://ac.nowcoder.com/acm/problem/226498">【模板】单源最短路2 (nowcoder.com)</a></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> dis[<span class="number">5001</span>],vis[<span class="number">5001</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[<span class="number">5001</span>];</span><br><span class="line"><span class="type">int</span> l[<span class="number">5001</span>][<span class="number">5001</span>];<span class="comment">//这里是改动</span></span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;,greater&lt;&gt;&gt; pq;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y,w;<span class="comment">//这里是改动</span></span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;w;<span class="comment">//这里是改动</span></span><br><span class="line">        l[x][y]=w;<span class="comment">//这里是改动</span></span><br><span class="line">        l[y][x]=w;<span class="comment">//这里是改动</span></span><br><span class="line">        g[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">        g[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    pq.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> now=pq.<span class="built_in">top</span>().second;</span><br><span class="line">        <span class="type">int</span> len=pq.<span class="built_in">top</span>().first;</span><br><span class="line">        <span class="keyword">if</span>(!vis[now])&#123;</span><br><span class="line">            vis[now]=<span class="number">1</span>;</span><br><span class="line">            dis[now]=len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> a:g[now])&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[a])&#123;</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;len+l[a][now],a&#125;);<span class="comment">//这里是改动</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(vis[n])&#123;</span><br><span class="line">        cout&lt;&lt;dis[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ac.nowcoder.com/acm/contest/94803/1009">1009-【模板】单源最短路Ⅲ ‖ 非负权图_模板题内测 (nowcoder.com)</a></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,s;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&gt; <span class="built_in">g</span>(n<span class="number">+1</span>,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y,u;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y&gt;&gt;u;</span><br><span class="line">        g[x].<span class="built_in">push_back</span>(&#123;y,u&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n<span class="number">+1</span>,<span class="number">9e18</span>)</span>,<span class="title">vi</span><span class="params">(n<span class="number">+1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;,greater&lt;&gt;&gt; pq;</span><br><span class="line">    ans[s]=<span class="number">0</span>;</span><br><span class="line">    pq.<span class="built_in">push</span>(&#123;<span class="number">0</span>,s&#125;);</span><br><span class="line">    <span class="keyword">while</span>(pq.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> [val,root] = pq.<span class="built_in">top</span>();</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (val &gt; ans[root]) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> [son,w]:g[root])&#123;</span><br><span class="line">            <span class="keyword">if</span>(ans[son]&gt;ans[root]+w)&#123;</span><br><span class="line">                ans[son]=ans[root]+w;</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;ans[son],son&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i]==<span class="number">9e18</span>)cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
